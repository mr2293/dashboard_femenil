filtered_data$carga_cronica,
filtered_data$ac_ratio * scaling_factor), na.rm = TRUE) * 1.2),
name = NULL,
sec.axis = sec_axis(~./scaling_factor, name = "A:C Ratio", breaks = seq(0, 3, 0.5))
) +
# More ticks on X axis
scale_x_date(date_breaks = "1 day", date_labels = "%d-%b") +
# Labels and theme
labs(
title = paste("Relación A:C 7:21 –", player),
x = NULL,
y = "Nivel de Carga",
color = NULL
) +
geom_text(
data = tibble(
x = max(filtered_data$date) + 0.2,
y = ac_breaks * scaling_factor,
label = as.character(ac_breaks)
),
aes(x = x, y = y, label = label),
inherit.aes = FALSE,
hjust = 0, size = 5.8, fontface = "bold", color = "black"
) +
# annotate("text",
#          x = max(filtered_data$date) + 0.35,
#          y = max(ac_breaks) * scaling_factor * 1.15,
#          label = "Relación A:C",
#          angle = 90,
#          fontface = "bold",
#          size = 5,
#          color = "black",
#          hjust = 0.5) +
# coord_cartesian(clip = "off") +
scale_color_manual(values = c(
"Carga Aguda" = "#0072B2",
"Carga Crónica" = "#4D4D4D",
"Relación A:C" = "goldenrod"
)) +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 45, hjust = 1, size = 14),
axis.text.y = element_text(size = 16),
axis.title.y = element_text(size = 16, margin = margin(r = 10)),
plot.title = element_text(hjust = 0.5, size = 22, face = "bold",
margin = margin(t = 35, b = 10)),
plot.subtitle = element_text(size = 15, face = "bold", hjust = 0.5),
plot.margin = margin(t = 25, r = 20, b = 20, l = 20),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank(),
legend.position = "bottom",
legend.title = element_text(size = 14),
legend.text = element_text(size = 13)
)
}
# plot_individual_ac("Álvaro Fidalgo")
# Plot Individual HSR -------
micros_hsr <- micros_shiny_comb_fem |>
filter(player %in% selected_players)
micros_hsr <- micros_hsr |>
mutate(date = as.Date(date)) |>
group_by(player, date) |>
summarize(HSR_abs_dist = sum(HSR_abs_dist, na.rm = TRUE), .groups = "drop") |>
arrange(player, date) |>
group_by(player) |>
group_modify(~ process_ewma(.x, "HSR_abs_dist")) |>
ungroup() |>
rename(
acute_HSR = acute_load_HSR_abs_dist,
chronic_HSR = chronic_load_HSR_abs_dist
)
plot_individual_hsr <- function(player) {
max_day <- max(micros_hsr$date, na.rm = TRUE)
filtered_data <- micros_hsr |>
filter(player == !!player & date >= max_day - 20)
# Safeguard against empty data
if (nrow(filtered_data) == 0) {
return(
ggplot() +
annotate("text", x = 0.5, y = 0.5,
label = paste("No hay datos recientes para", player),
size = 6, color = "red") +
theme_void()
)
}
ggplot(filtered_data, aes(x = date)) +
geom_line(aes(y = acute_HSR, color = "HSR Agudo"), linewidth = 2) +
geom_point(aes(y = acute_HSR, color = "HSR Agudo",
text = paste0("Jugador: ", player,
"<br>Fecha: ", date,
"<br>HSR Agudo: ", round(acute_HSR, 1))),
size = 3.5) +
geom_line(aes(y = chronic_HSR, color = "HSR Crónico"), linewidth = 2) +
geom_point(aes(y = chronic_HSR, color = "HSR Crónico",
text = paste0("Jugador: ", player,
"<br>Fecha: ", date,
"<br>HSR Crónico: ", round(chronic_HSR, 1))),
size = 3.5) +
scale_x_date(date_breaks = "1 day", date_labels = "%d-%b") +
labs(
title = paste("HSR (>21 km/h) Agudo vs. Crónico –", player),
x = NULL, y = "HSR en metros", color = NULL,
subtitle = "Valores de distancia de HSR en metros"
) +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 45, hjust = 1, size = 14),
axis.text.y = element_text(size = 16),
axis.title.y = element_text(size = 16, margin = margin(r = 10)),
plot.title = element_text(hjust = 0.5, size = 22, face = "bold", margin = margin(t = 35, b = 10)),
plot.subtitle = element_text(size = 15, face = "bold", hjust = 0.5),
plot.margin = margin(t = 25, r = 20, b = 20, l = 20),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank(),
legend.position = "bottom",
legend.title = element_text(size = 14),
legend.text = element_text(size = 13)
) +
scale_color_manual(values = c(
"HSR Agudo" = "#0072B2",
"HSR Crónico" = "#4D4D4D"
))
}
# plot_individual_hsr("Álvaro Fidalgo")
# Scatter de ACWR & Recuperación -------
# Asegurarse que las fechas están en formato Date
recuperacion_df <- recuperacion_df |>
mutate(date = as.Date(`Marca temporal`))
micros_individual <- micros_individual |>
mutate(date = as.Date(date))
# Último ACWR por jugador
latest_acwr <- micros_individual |>
group_by(player) |>
filter(date == max(date, na.rm = TRUE)) |>
select(player, ac_ratio)
# Último recovery score por jugador
latest_recovery <- recuperacion_df |>
group_by(Nombre) |>
filter(date == max(date, na.rm = TRUE)) |>
select(player = Nombre, recovery_score)
latest_dates <- recuperacion_df |>
group_by(`Nombre`) |>
summarize(latest_date = max(date, na.rm = TRUE), .groups = "drop") |>
rename(player = Nombre)
# Combinar datasets
scatter_df <- latest_acwr |>
inner_join(latest_recovery, by = "player") |>
inner_join(latest_dates, by = "player") |>
mutate(
recovery_status = case_when(
recovery_score >= 6 ~ "Recuperada",
TRUE ~ "Fatigada"
),
load_status = case_when(
ac_ratio < 0.8 ~ "Carga Baja",
ac_ratio > 1.3 ~ "Carga Alta",
TRUE ~ "Carga Óptima"
),
color_status = case_when(
ac_ratio >= 0.8 & ac_ratio <= 1.3 & recovery_score >= 6 ~ "green",
(ac_ratio >= 0.8 & ac_ratio <= 1.3 & recovery_score < 6) |
(recovery_score >= 6 & (ac_ratio < 0.8 | ac_ratio > 1.3)) ~ "yellow",
TRUE ~ "red"
)
)
acwr_scatter_plot <- ggplot(scatter_df, aes(
x = recovery_score,
y = ac_ratio,
fill = color_status,   # use color aesthetic for traffic light logic
text = paste0(
"Jugadora: ", player,
"<br>Fecha: ", latest_date,
"<br>Score de Recuperación: ", recovery_score,
"<br>Índice de Carga: ", round(ac_ratio, 2),
"<br>Estatus de Recuperación: ", recovery_status,
"<br>Estatus de Carga: ", load_status
),
customdata = player
)) +
geom_hline(yintercept = c(0.8, 1.3), linetype = "dashed", color = "gray50") +
geom_point(
size = 6, alpha = 0.9, color = "black"
) +
# geom_text(
#   aes(label = player),
#   nudge_x = 0.18,
#   nudge_y = 0,
#   size = 2.5,
#   show.legend = FALSE
# ) +
scale_fill_manual(
name = "Estado",
values = c(
"green" = "#2ca02c",   # Verde
"yellow" = "#ffbf00",  # Amarillo
"red" = "#d62728"      # Rojo
)
# ,
# labels = c(
#   "green" = "OK",
#   "yellow" = "Advertencia",
#   "red" = "Crítico"
# )
) +
labs(
x = "Score de Recuperación",
y = "Índice de Carga (ACWR)",
title = "ACWR & Recuperación: Resumen del equipo de hoy"
) +
theme_minimal(base_size = 14) +
theme(
legend.position = "none",
legend.title = element_text(size = 13, face = "bold"),
legend.text = element_text(size = 12),
plot.title = element_text(hjust = 0.5, face = "bold", size = 20),
panel.grid.minor = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.major.y = element_blank()
)
# ggplotly(acwr_scatter_plot, tooltip = "text")
# Scatter de ACWR & RPE -------
# 1) Cargar RPE desde el XLSX
# ---------------------------
path_rpe <- "data/rpe_femenil.xlsx"
rpe_raw <- read_excel(path_rpe)
# Asegurar tipos y nombres clave
rpe_df <- rpe_raw |>
# Ajusta aquí si tus encabezados tienen pequeñas variaciones
rename(
fecha_rpe = `Marca temporal`,
player = `Nombre estandarizado`,
rpe_val = `RPE de la sesión`
) |>
mutate(
date = as.Date(fecha_rpe),
# Forzar RPE a numérico por si viene como texto ("5 duro", etc.)
rpe = suppressWarnings(as.numeric(rpe_val))
)
# |>
#   # Si hay respuestas con rpe no numérico, descártalas
#   filter(!is.na(rpe))
rpe_df <- rpe_df |>
mutate(
rpe_val = case_when(
rpe_val == "1 muy muy fácil" ~ 1,
rpe_val == "2 fácil" ~ 2,
rpe_val == "3 moderado" ~ 3,
rpe_val == "4 algo duro" ~ 4,
rpe_val == "5 duro" ~ 5,
rpe_val == "6 más que duro" ~ 6,
rpe_val == "7 muy duro" ~ 7,
rpe_val == "8 muy muy duro" ~ 8,
rpe_val == "9 casi lo máximo" ~ 9,
)
)
# ---------------------------
# 2) Asegurar fechas en tus dfs existentes
# ---------------------------
recuperacion_df <- recuperacion_df |>
mutate(date = as.Date(`Marca temporal`))
micros_individual <- micros_individual |>
mutate(date = as.Date(date))
# ---------------------------
# 3) Último ACWR por jugadora
# ---------------------------
latest_acwr_2 <- micros_individual |>
group_by(player) |>
filter(date == max(date, na.rm = TRUE)) |>
ungroup() |>
select(player, ac_ratio, acwr_date = date)
# ---------------------------
# 4) Último RPE por jugadora
# ---------------------------
latest_rpe <- rpe_df |>
group_by(player) |>
filter(date == max(date, na.rm = TRUE)) |>
ungroup() |>
select(player, rpe_val, latest_date = date)
# ---------------------------
# 5) Combinar y clasificar estatus/color
# ---------------------------
scatter_df_rpe <- latest_acwr_2 |>
inner_join(latest_rpe, by = "player") |>
mutate(
# Etiquetas cualitativas de RPE (opcional; para el eje X y/o tooltip)
rpe_label = dplyr::case_when(
rpe_val == 1 ~ "1 muy muy fácil",
rpe_val == 2 ~ "2 fácil",
rpe_val == 3 ~ "3 moderado",
rpe_val == 4 ~ "4 algo duro",
rpe_val == 5 ~ "5 duro",
rpe_val == 6 ~ "6 más que duro",
rpe_val == 7 ~ "7 muy duro",
rpe_val == 8 ~ "8 muy muy duro",
rpe_val == 9 ~ "9 casi lo máximo",
TRUE ~ as.character(rpe_val)
),
load_status = case_when(
ac_ratio < 0.8 ~ "Carga Baja",
ac_ratio > 1.3 ~ "Carga Alta",
TRUE ~ "Carga Óptima"
),
# LÓGICA DE COLORES EXACTA
color_status = case_when(
ac_ratio > 0.8 & ac_ratio < 1.3 & rpe_val <= 4 ~ "green",
rpe_val >= 7 & (ac_ratio < 0.8 | ac_ratio > 1.3) ~ "red",
TRUE ~ "yellow"
)
)
# ---------------------------
# 6) Gráfico (X = RPE_VAL, Y = ACWR)
# ---------------------------
acwr_rpe_scatter <- ggplot(
scatter_df_rpe,
aes(
x = rpe_val,
y = ac_ratio,
fill = color_status,
text = paste0(
"Jugadora: ", player,
"<br>Fecha (RPE): ", latest_date,
"<br>RPE: ", rpe_label,
"<br>Índice de Carga (ACWR): ", round(ac_ratio, 2),
"<br>Estatus de Carga: ", load_status
),
customdata = player
)
) +
geom_hline(yintercept = c(0.8, 1.3), linetype = "dashed", color = "gray50") +
geom_point(size = 6, alpha = 0.9, color = "black", shape = 21) +
scale_x_continuous(
breaks = 1:9,
labels = c(
"1", "2", "3", "4", "5", "6", "7", "8", "9"
)
) +
scale_fill_manual(
values = c(
"green" = "#2ca02c",
"yellow" = "#ffbf00",
"red" = "#d62728"
)
) +
labs(
x = "RPE de la sesión (1–10)",
y = "Índice de Carga (ACWR)",
title = "ACWR & RPE: Resumen del equipo (última respuesta por jugadora)"
) +
theme_minimal(base_size = 14) +
theme(
legend.position = "none",
plot.title = element_text(hjust = 0.5, face = "bold", size = 20),
panel.grid.minor = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.major.y = element_blank()
)
# ACWR x Rest Score Plot
recuperacion_df <- recuperacion_df |>
mutate(
date = as.Date(`Marca temporal`),
rest_score = compute_rest_score(
`Nivel de Cansancio hoy (Fatiga)`,
`Qué tal descansaste ayer?`,
`Cuántas horas dormiste ayer?`
),
pain_score = compute_pain_score(
`Estás adolorido de alguna parte?`
)
)
micros_individual <- micros_individual |>
mutate(date = as.Date(date))
# --- Latest ACWR per player (unchanged) ---
latest_acwr <- micros_individual |>
group_by(player) |>
filter(date == max(date, na.rm = TRUE)) |>
select(player, ac_ratio)
# --- Latest dates per player from wellness survey (unchanged) ---
latest_dates <- recuperacion_df |>
group_by(Nombre) |>
summarize(latest_date = max(date, na.rm = TRUE), .groups = "drop") |>
rename(player = Nombre)
# =========================
#   1) ACWR x REST SCORE
# =========================
# Latest rest score per player
latest_rest <- recuperacion_df |>
group_by(Nombre) |>
filter(date == max(date, na.rm = TRUE)) |>
select(player = Nombre, rest_score)
rest_scatter_df <- latest_acwr |>
inner_join(latest_rest,  by = "player") |>
inner_join(latest_dates, by = "player") |>
mutate(
rest_status = if_else(rest_score >= 6, "Descansada", "No descansada"),
load_status = case_when(
ac_ratio < 0.8 ~ "Carga Baja",
ac_ratio > 1.3 ~ "Carga Alta",
TRUE ~ "Carga Óptima"
),
color_status_rest = case_when(
ac_ratio >= 0.8 & ac_ratio <= 1.3 & rest_score >= 6 ~ "green",
(ac_ratio >= 0.8 & ac_ratio <= 1.3 & rest_score < 6) |
(rest_score >= 6 & (ac_ratio < 0.8 | ac_ratio > 1.3)) ~ "yellow",
TRUE ~ "red"
)
) |>
filter(!is.na(rest_score), !is.na(ac_ratio))
acwr_rest_scatter_plot <- ggplot(
rest_scatter_df,
aes(
x = rest_score,
y = ac_ratio,
fill = color_status_rest,
text = paste0(
"Jugadora: ", player,
"<br>Fecha: ", latest_date,
"<br>Score de Descanso: ", rest_score,
"<br>Índice de Carga: ", round(ac_ratio, 2),
"<br>Estatus de Descanso: ", rest_status,
"<br>Estatus de Carga: ", load_status
),
customdata = player
)
) +
geom_hline(yintercept = c(0.8, 1.3), linetype = "dashed", color = "gray50") +
geom_point(size = 6, alpha = 0.9, color = "black") +
scale_fill_manual(
values = c("green" = "#2ca02c", "yellow" = "#ffbf00", "red" = "#d62728")
) +
labs(
x = "Score de Descanso",
y = "Índice de Carga (ACWR)",
title = "ACWR & Descanso: Resumen del equipo de hoy"
) +
theme_minimal(base_size = 14) +
theme(
legend.position = "none",
legend.title = element_text(size = 13, face = "bold"),
legend.text = element_text(size = 12),
plot.title = element_text(hjust = 0.5, face = "bold", size = 20),
panel.grid.minor = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.major.y = element_blank()
)
# =========================
#   2) ACWR x PAIN SCORE
# =========================
# Latest pain score per player
latest_pain <- recuperacion_df |>
group_by(Nombre) |>
filter(date == max(date, na.rm = TRUE)) |>
select(player = Nombre, pain_score)
pain_scatter_df <- latest_acwr |>
inner_join(latest_pain,  by = "player") |>
inner_join(latest_dates, by = "player") |>
mutate(
pain_status = if_else(pain_score < 6, "Sin dolor", "Con dolor"),
load_status = case_when(
ac_ratio < 0.8 ~ "Carga Baja",
ac_ratio > 1.3 ~ "Carga Alta",
TRUE ~ "Carga Óptima"
),
color_status_pain = case_when(
ac_ratio >= 0.8 & ac_ratio <= 1.3 & pain_score < 6 ~ "green",
(ac_ratio >= 0.8 & ac_ratio <= 1.3 & pain_score >= 6) |
(pain_score < 6 & (ac_ratio < 0.8 | ac_ratio > 1.3)) ~ "yellow",
TRUE ~ "red"
)
) |>
filter(!is.na(pain_score), !is.na(ac_ratio))
acwr_pain_scatter_plot <- ggplot(
pain_scatter_df,
aes(
x = pain_score,
y = ac_ratio,
fill = color_status_pain,
text = paste0(
"Jugadora: ", player,
"<br>Fecha: ", latest_date,
"<br>Score de Dolor Muscular: ", pain_score,
"<br>Índice de Carga: ", round(ac_ratio, 2),
"<br>Estatus de Dolor Muscular: ", pain_status,
"<br>Estatus de Carga: ", load_status
),
customdata = player
)
) +
geom_hline(yintercept = c(0.8, 1.3), linetype = "dashed", color = "gray50") +
geom_point(size = 6, alpha = 0.9, color = "black") +
scale_fill_manual(
values = c("green" = "#2ca02c", "yellow" = "#ffbf00", "red" = "#d62728")
) +
labs(
x = "Score de Dolor Muscular",
y = "Índice de Carga (ACWR)",
title = "ACWR & Dolor Muscular: Resumen del equipo de hoy"
) +
theme_minimal(base_size = 14) +
theme(
legend.position = "none",
legend.title = element_text(size = 13, face = "bold"),
legend.text = element_text(size = 12),
plot.title = element_text(hjust = 0.5, face = "bold", size = 20),
panel.grid.minor = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.major.y = element_blank()
)
shiny::runApp()
